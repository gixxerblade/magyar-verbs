/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerbLabRouteImport } from './routes/verb-lab'
import { Route as ReferenceRouteImport } from './routes/reference'
import { Route as QuizRouteImport } from './routes/quiz'
import { Route as HarmonyDrillRouteImport } from './routes/harmony-drill'
import { Route as FlashcardsRouteImport } from './routes/flashcards'
import { Route as IndexRouteImport } from './routes/index'

const VerbLabRoute = VerbLabRouteImport.update({
  id: '/verb-lab',
  path: '/verb-lab',
  getParentRoute: () => rootRouteImport,
} as any)
const ReferenceRoute = ReferenceRouteImport.update({
  id: '/reference',
  path: '/reference',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizRoute = QuizRouteImport.update({
  id: '/quiz',
  path: '/quiz',
  getParentRoute: () => rootRouteImport,
} as any)
const HarmonyDrillRoute = HarmonyDrillRouteImport.update({
  id: '/harmony-drill',
  path: '/harmony-drill',
  getParentRoute: () => rootRouteImport,
} as any)
const FlashcardsRoute = FlashcardsRouteImport.update({
  id: '/flashcards',
  path: '/flashcards',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/harmony-drill': typeof HarmonyDrillRoute
  '/quiz': typeof QuizRoute
  '/reference': typeof ReferenceRoute
  '/verb-lab': typeof VerbLabRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/harmony-drill': typeof HarmonyDrillRoute
  '/quiz': typeof QuizRoute
  '/reference': typeof ReferenceRoute
  '/verb-lab': typeof VerbLabRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/harmony-drill': typeof HarmonyDrillRoute
  '/quiz': typeof QuizRoute
  '/reference': typeof ReferenceRoute
  '/verb-lab': typeof VerbLabRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/flashcards'
    | '/harmony-drill'
    | '/quiz'
    | '/reference'
    | '/verb-lab'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/flashcards'
    | '/harmony-drill'
    | '/quiz'
    | '/reference'
    | '/verb-lab'
  id:
    | '__root__'
    | '/'
    | '/flashcards'
    | '/harmony-drill'
    | '/quiz'
    | '/reference'
    | '/verb-lab'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlashcardsRoute: typeof FlashcardsRoute
  HarmonyDrillRoute: typeof HarmonyDrillRoute
  QuizRoute: typeof QuizRoute
  ReferenceRoute: typeof ReferenceRoute
  VerbLabRoute: typeof VerbLabRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verb-lab': {
      id: '/verb-lab'
      path: '/verb-lab'
      fullPath: '/verb-lab'
      preLoaderRoute: typeof VerbLabRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reference': {
      id: '/reference'
      path: '/reference'
      fullPath: '/reference'
      preLoaderRoute: typeof ReferenceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz': {
      id: '/quiz'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof QuizRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/harmony-drill': {
      id: '/harmony-drill'
      path: '/harmony-drill'
      fullPath: '/harmony-drill'
      preLoaderRoute: typeof HarmonyDrillRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flashcards': {
      id: '/flashcards'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof FlashcardsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlashcardsRoute: FlashcardsRoute,
  HarmonyDrillRoute: HarmonyDrillRoute,
  QuizRoute: QuizRoute,
  ReferenceRoute: ReferenceRoute,
  VerbLabRoute: VerbLabRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
